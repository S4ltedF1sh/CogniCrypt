abstract Enum

//enum Security
abstract Security : Enum -> integer
NoSecurity: Security = 0
Broken: Security = 1
Weak: Security = 2
Medium: Security = 3
Strong: Security = 4

//enum Performance
abstract Performance : Enum -> integer
VerySlow: Performance = 1
Slow: Performance = 2
Fast: Performance = 3
VeryFast: Performance = 4

//enum Padding
abstract Padding: Enum 
NoPadding : Padding
PKCS5Padding : Padding

//enum Mode
abstract Mode : Enum
ECB : Mode
CBC : Mode
OFB : Mode
GCM : Mode

abstract XQuantum : Enum
pre  : XQuantum 
post : XQuantum

abstract AttackModel : Enum
 CPA : AttackModel
 CCA1 : AttackModel 
 CCA2 : AttackModel
 SC : AttackModel

abstract Algorithm
    name -> string
    description -> string
    security -> Security
    performance -> Performance

abstract Cipher : Algorithm
	secProperty -> AttackModel
	quantum -> XQuantum
	
abstract SymmetricCipher : Cipher
    keySize -> integer

abstract SymmetricBlockCipher : SymmetricCipher
    mode -> Mode
    padding -> Padding
    [mode != ECB]
    [mode = CBC => padding != NoPadding]

//Ciphers
AES128 : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 128]
	[performance = VeryFast]
	[security = Medium]

AES192 : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 192]
	[performance = Fast]
	[security = Strong]
	

AES256 : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 256]
	[performance = Fast]
	[security = Strong]
	
abstract AsymmetricCipher : Cipher
	keySizePub -> integer
	keySizeSec -> integer
	performanceEnc -> Performance
	performanceDec -> Performance

RSA: AsymmetricCipher
    [ name = "RSA" ]
    [ description = "RSA Algm"]
    [ security = Strong ]
    [ performance = Slow ]
    [ keySizePub = 4 ]
    [ keySizeSec = keySizePub ]

abstract LatticeBasedCipher: AsymmetricCipher
	messageSize -> integer
	cipherSize -> integer
	n -> integer
	q -> integer 

// 1 - 128, 2 = 192, 3 = 256, 20 = 2053, 40 = 4093
// https://web.eecs.umich.edu/~cpeikert/pubs/lwe-analysis.pdf (p. 17 of 21)
// 6 = 6.77, 7 = 8.35, 8 = 8, 9 = 8.87

LP: LatticeBasedCipher
    [ name = "LP" ]
    [ description = "Linder-Peikert Scheme"]
    [ messageSize = 1 || messageSize = 2 || messageSize = 3 ]
    [ n = 1 || n = 2 || n = 3 || n = 4 ]
    [ q =  20 || q = 40 ] // Technically, this line is not necessary.
    s -> integer
    [ s = 6 || s = 9 || s = 7 || s = 8 ] // Technically, this line is not necessary.
    [ quantum = post ]
    [ n = 1 => q = 20 && s = 6 && security = Broken && cipherSize = 22 * messageSize ]
    [ n = 2 => q = 40 && s = 9 && security = Weak   && cipherSize = 30 * messageSize ]
    [ n = 3 => q = 40 && s = 7 && security = Medium && cipherSize = 36 * messageSize ]
    [ n = 4 => q = 40 && s = 8 && security = Strong && cipherSize = 42 * messageSize ]
    [ keySizePub = n * n * 25]
    [ keySizeSec = n * 26 ]
    [ performanceEnc = Slow ]
[ performanceDec = Fast ]